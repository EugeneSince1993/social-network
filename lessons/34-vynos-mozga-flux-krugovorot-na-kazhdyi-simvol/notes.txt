Концепция Flux - круговорот передачи данных между BLL и UI.
Flux - это подход к организации потока данных.
И из Flux вытекает одна из реализаций - Redux.
Flux - архитектура описания, а конкретная реализация - Redux (самая популярная).

Наша цель - понять архитектурную картину React.
Перед началом разработки приложения мы должны ответить на вопрос: "Как мы будем организовывать state management?".
Помимо Redux есть MobX. Redux - функциональное программирование, MobX - ООП.
Парадигма программирования - это совокупность идей и понятий, определяющих стиль написания компьютерных программ (подход к программированию). Это способ концептуализации, определяющий организацию вычислений и структурирование работы, выполняемой компьютером.
Context API
Redux - библиотека, которая реализует Flux-архитектуру.
"onChange" handler
state меняется только с помощью функций, определенных в state.js
Если функция не находит переменную внутри себя, тогда она выпрыгивает из своей локальной области видимости и начинает искать эту переменную в глобальной области видимости (в пределах текущего файла).
В render.js импортируются функции из state.js, и в state.js импортируется функция из render.js. Значит, у этих файлов есть циклическая зависимость. Это плохо, и в ближайших уроках мы это исправим.
С функцией updateNewPostText() мы теперь синхронизируем значение в textarea (UI) со state (BLL).
state.js
window.state = state;

после этого можно в браузере ввести в консоли state, и отобразится объект нашего состояния, и тогда можно увидеть измененное значение свойства newPostText - то есть BLL обновляется.

Сам React (а не только концепция Flux) стремится работать по принципу круговорота передачи данных между BLL и UI.
Task
Реализовать добавление сообщений на странице Messages по аналогии с реализацией добавления постов в MyPosts +
