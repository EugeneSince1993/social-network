https://www.w3schools.com/js/js_object_methods.asp

const person = {
  firstName: "John",
  lastName: "Doe",
  id: 5566,
  fullName: function() {
    return this.firstName + " " + this.lastName;
  }
};

https://www.digitalocean.com/community/tutorials/how-to-use-object-methods-in-javascript-ru

const job = {
  position: 'cashier',
  type: 'hourly',
  isAvailable: true,
  showDetails() {
    const accepting =
      this.isAvailable ? 'is accepting applications' : "is not currently accepting applications";
    console.log(`The ${this.position} position is ${this.type} and ${accepting}.`);
  }
};

===

Чтобы объект был не тупым, а умным, ООПшным, у него должны быть не только строки/числа, но и методы (например, sayName()). Такой метод работает с внутренними данными объекта.

let man = {
  name: 'Dmitry',
  age: 31,
  sayName() {
    alert(this.name);
  }
};

console.log(man.age);
console.log(man.name);
man.sayName();

let page = {
  title: 'samuraiJS',
  content: ``,
  render() {
    document.title = this.title;
    document.write(this.content);
  }
};

page.content = `<div>Content about React JS</div>`;
page.render();

Транспиляция — преобразование программы, при котором используется исходный код программы, написанной на одном языке программирования в качестве исходных данных, и производится эквивалентный исходный код на другом языке программирования.
https://ru.wikipedia.org/wiki/%D0%A2%D1%80%D0%B0%D0%BD%D1%81%D0%BF%D0%B0%D0%B9%D0%BB%D0%B5%D1%80
Транспиляция из JSX в JS.

Взаимодействуем с объектом как бы через рычажки благодаря его свойствам и методам. Все свойства и методы объекта - это и есть его интерфейс.
Код метода render() спрятан (инкапсулирован) внутри объекта, чтобы пользователю объекта было проще с ним взаимодействовать. Взаимодействуем с объектом только через интерфейс (не залезаем под капот).
У объектов с данными страниц веб-приложения интерфейс (набор свойств и методов) одинаковый.
Инкапсуляция - это сокрытие деталей. Т.е., это, когда мы инкапсулируем какую-то логику где-то в чем-то, обычно в объектах (или в методах).
Инкапсулировать логику - скрыть детали от внешнего человека.
В классовых компонентах мы определяем метод render().
В React JS много магии, но вся она инкапсулирована. Мы используем только заданные свойства и методы (интерфейс), созданные в React. Например, state или setState().
Часто мы хотим обезопасить наши данные. "Свойство объекта, ты являешься приватным. Не нужно тобой пользоваться напрямую". При создании своего объекта, чтобы создать такое свойство, мы ставим знак подчеркивания перед именем свойства. Тем самым мы говорим внешнему пользователю: "Это свойство не является интерфейсом. Не пользуйся, пожалуйста, им напрямую". Это не ограничивает внешнего человека от использования этого свойства.
Внешний мир - это когда мы пользуемся объектом через внешнюю ссылку, например, page2._content.
Мы не можем присвоить значение свойству "_content" напрямую, как обычно.
Но мы можем присвоить значение этому свойству через метод-setter - setContent().
set - устанавливать, задавать
setter - задатчик; механизм для установки; "установщик", "устанавливающий", "задающий"
setter - установщик

getter - получатель; добытчик, приобретатель
getter - получатель

let page2 = {
  title: 'samuraiJS',
  _content: ``,
  setContent(content) {
    this._content = this.content;
  },
  getContent() {
    return this._content;
  },
  render: function() {
    document.write(this._content);
  }
};

сеттер 9.40







