Зарефакторим наш state.
store - ООП-объект, а _state - тупой, простой объект.
Свойство, метод, рассчитанные на внешнее использование, являются интерфейсом.
В state.js в store меняем название метода _renderEntireTree на _callSubscriber, потому что для объекта store неважно, рендерим мы дерево или что мы делаем. Для объекта store важно то, что мы вызываем (уведомляем) подписчика (шаблон - "обработчик события"). У нас может быть только 1 подписчик - мы так спроектировали нашу систему. Мы не знаем, кто будет подписчиком. В данном случае подписчиком является rerenderEntireTree. Метод _callSubscriber просто уведомляет подписчика (observer) извне.
Чтобы поменять название переменной в нескольких местах (обычно, в одном файле, зависит от области видимости - WebStorm автоматически правильно определяет область видимости переменной, функции), нужно выделить эту переменную и нажать Shift+F6.
https://www.jetbrains.com/help/webstorm/specific-javascript-refactorings.html#javascript_rename_function

Вставлять debugger внутри объекта нельзя. Поскольку объект создается моментально.
Та строка, которую указывает консоль в сообщении об ошибке - перед ней надо ставить debugger (точка останова).
store.getState() - мы вызываем метод getState() от имени объекта store.
store.addPost - addPost это callback, он не вызывается от имени объекта store.
В Sources наводим на метод и жмем F11 (или кликаем по файлу метода), тогда мы перейдем в исходный файл, где лежит этот метод.
Чтобы быстро переключать между методами в разных файлах, можно выбирать их во вкладке Call Stack в Sources.
Подвох с контекстом вызова.
Отдавая метод (какого-либо объекта, например, store) кому-то, если мы хотим, чтобы внутри этого метода  (речь идет про this в методе) владелец этого метода (объект) сохранился, то мы должны этот метод связать (bind):
store.addPost.bind(store)

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
bind() не вызывает функцию addPost. bind() берет функцию addPost, связывает ее с объектом store и возвращает другую функцию, такую же, равнозначную addPost, но внутри this будет всегда store.
bind - связывать

bind() - must have
bind bound bound
bound - связал, связан; связанный; граница
bound - связанный
Теперь addPost - это bound addPost (так отображается в Sources) - связанная (с объектом) функция.
React - библиотека.
У React есть инструмент, который работает со state - setState() (сегодня еще появляются Hooks).
https://www.geeksforgeeks.org/reactjs-setstate/
https://reactjs.org/docs/state-and-lifecycle.html
Но в больших приложениях setState() не используется, потому что "local state of class components" используется только в учебных и маленьких приложениях.
setState() можно использовать только в редких случаях в больших приложениях, когда мы не хотим выносить state за пределы React, когда нужно сделать какие-то незначительные локальные вещи, из-за которых мы не хотим напрягать Redux такой мелкой работенкой.
наш нынешний самодельный store - это копия store в Redux.

