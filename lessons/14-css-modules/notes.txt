У нас в проекте пути относительные (относительно текущего расположения файла).
Чтобы стили работали только для конкретного компонента, называем css-файл, например, "Navbar.module.css".
Navbar.module.css - это css-модуль (css-объект).
import classes from './Navbar.module.css';
classes - это объект.
Объект - это структура данных, в которой содержатся пары "ключ-значение".
let person = {
  name: "Jack",
  age: 20
};

import classes from './Navbar.module.css';

let classes = {
  nav: "Navbar_nav__1nHiO",
  item: "Navbar_item__3zqCK"
};

<nav className={classes.nav}>
...
</nav>

В фигурных скобках у нас располагается JS, чтобы мы могли вставить JS в HTML.

Инкапсуляция (англ. encapsulation, от лат. in capsula) — в информатике размещение в одном компоненте данных и методов, которые с ними работают. В реализации большинства языков программирования (C++, C#, Java и другие), обеспечивает механизм сокрытия, позволяющий разграничивать доступ к различным компонентам программы.

Таким образом, css-модуль обеспечивает инкапсуляцию css-стилей для конкретного компонента.

App.css - не модуль, в нем лежат глобальные стили.
.header img {
  width: 20px;
}

img будет вложено в новый класс "Header_header__V-xzV", т.е. по теме вложенности проблем не будет.

В итоге выглядит так:
.Header_header__V-xzV img {
  width: 20px;
}
В JS запрещено в имени свойства объекта писать "-". Поэтому мы не используем в названиях стилей (классов) дефис. Можно ставить подчеркивание или делать camelCase.

ES6
Шаблонные строки
Template variables

<div className={s.item}>
...
</div>

let c1 = "item";
let c2 = "active";
// "item active"
let classes = c1 + " " + c2;
let classesNew = `${c1} ${c2}`;
С помощью template variable мы вставляем JS в строку (строчное значение).
