Dialogs.jsx
Массив содержит в себе совокупность одинаковых объектов.
У нас есть два уровня (мира):
1. Мир данных - BLL (business logic layer) (DATA), истина. BLL - это данные.
2. Мир UI. UI - это компоненты.
Имея BLL (истину), мы берем UI и перерисовываем его.
Нашему компоненту нужны данные. Компонент получает данные через props и отрисовывает содержимое.
Alt
В файле компонента выделяем имя компонента и нажимаем "Alt+F7", и тогда мы увидим то место, где компонент прописывается (вызывается).
===
Dialogs.jsx
Пока что данные находятся внутри UI.
Предположим, данные (массив) пришли через props.
Преобразование (перебирание) массива происходит с помощью функции "map()".
Диалоги, сообщения - это сущности, записи в базе данных.
В БД есть таблицы с пользователями, сообщениями.
У каждой сущности в БД есть ID.
Shift+Alt+arrow-up (or arrow-down) - переместить строку
Каждый объект в массиве характеризует какую-либо сущность в БД.
Принцип единственной ответственности (Single responsibility principle) - принцип ООП, обозначающий, что каждый объект должен иметь одну ответственность и эта ответственность должна быть полностью инкапсулирована в класс. Все его поведения должны быть направлены исключительно на обеспечение этой ответственности.
Принцип единственной ответственности - один из самых главных принципов в программировании.
Простыми словами, этот принцип означает: "Программные объекты, функции (вещи, которые что-то делают) не надо излишне нагружать кодом."
Из-за этого и произошло разделение на BLL и UI.
UI - это React.js.
BLL - это Redux.
В BLL хранятся данные (истина), как правило, это:
- объекты;
- массивы;
- массивы, в которых лежат объекты.
Эти объекты (массивы) приходят с сервера. Мы сделали AJAX-запрос на сервер, пришел ответ, мы заполнили наши объекты (которые лежат в проекте React.js). И мы готовы к тому, чтобы оживить наш UI, дать нашему UI правильную информацию. И наш UI работает с этими объектами и рисует все, что мы видим (в итоге).
Нам нужно сделать автоматически преобразование из массива данных в массив компонентов (тегов).
Поэтому мы будем использовать метод массива - "map()".
map - отображать, составлять, сопоставлять; наносить на карту; "перебирать" (массив)

