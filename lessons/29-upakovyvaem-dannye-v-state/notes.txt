Возьмем наши данные из index.js и вынесем в отдельный файл "storeBeforeRealRedux.js".
У нас есть состояние, мы его прокидываем в UI, и оно там рисуется. Из BLL берем state и прокидываем его внутрь компонентов через props. И компоненты (UI) отрисовывают актуальное состояние. Меняется state, меняется UI.
Упакуем 3 наших массива в объект state.
Мы этот state импортируем в index.js. А дальше через props будем прокидывать это state в компоненты. state приходит в Dialogs, и там мы берем его свойства dialogs и messages. В Profile пойдут только posts.
React - это функциональное программирование, но в нем местами присуствуют элементы ООП (объектно-ориентированоое программирование).
Функциональное программирование не запрещает объекты.
Объект - это сложная структура данных.
Есть примитивы - числа, строки, булевы значения.
Есть структуры посложнее - массивы, объекты.
Файлы в формате JSON передаются от сервера к клиенту и наоборот.
При вводе пути импорта можно нажать Ctrl+Space и увидеть подсказку - список файлов, папок.
Данные всех страниц (компонентов) веб-приложения хранятся в объекте state.
Структура объекта state состоит из подобъектов ("веток") - объектов, каждый из которых обслуживает конкретную страницу (отвечает за данные по конкретному компоненту). Эти подобъекты - отдельные свойства (объекта state) для каждой страницы.
POCO, POJO
plain object - простой объект
У нас (на данный момент) в проекте простые объекты, а не объекты в стиле ООП.
Task
1. Добавить аватары на страницу Messages. +
2. Сверстать сообщения таким образом, чтобы сообщения одного пользователя были выровнены по левому краю, а сообщения другого пользователя - по правому краю (по аналогии с WhatsApp).
3. Добавить в Sidebar блок Friends - с помощью state.
==
Free stock sources
Unsplash
==
Template literals
Example:
let firstName = "John";
let lastName = "Doe";

let text = `Welcome ${firstName}, ${lastName}!`;
==
