Из компонента в storeBeforeRealRedux отправляется (dispatch) действие (action).
Объект action создается в компоненте и отправляется в storeBeforeRealRedux.
Redux - система управления state, позволяет управляет большим, сложным состоянием.
Сегодня можно также управлять состоянием с помощью React Hooks.
action creator - функция, возвращающая объект action.
у action обязательно должно быть свойство type.
const actionCreator = (idNumber) => ({
  type: 'SELECT-DIALOG',
  userId: idNumber
});
let action = actionCreator(13);

В итоге мы отправляем с помощью dispatch() такой объект action:
{
  type: 'SELECT-DIALOG',
  userId: 13
}

==
Традиционный синтаксис action creator:
let addPostActionCreator = () => {
  return {
    type: 'ADD-POST'
  };
};

Вспомогательную функцию action creator мы просто импортируем, ее не надо прокидывать через props. Это не логическая часть программы (т.е. тут мы не прокидываем методы из storeBeforeRealRedux).
Создание action - это просто как утилита.
action creator должен быть в BLL.
const делаем тогда, когда переопределять переменную не собираемся.
Найти все использования конкретной переменной: выделяем переменную, жмем Ctrl+Alt+Shift+J
Синхронизация текста в textarea со state - круговорот Flux (архитектура).
Redux - продолжение Flux-архитектуры, одна из ее реализаций, версий.
==
action type - это строковая константа, которая записывается в объекте action:
{ type: 'ADD-POST' }
Можно выделить строковое значение, нажать Ctrl+Alt+V, и тогда создастся переменная или константа.
const ADD_POST = 'ADD-POST';
export const addPostActionCreator = () => {
  return {
    type: ADD_POST
  };
};
Функция должна использовать только то, что к ней приходит в параметрах - необязательное, но рекомендуемое правило. Это правило актуально, когда в функцию приходят реальные данные, от которых что-то зависит, данные, которые могут менять свое поведение.

Каждый файл в React является модулем, и все, объявленное в файле, не выходит за рамки этого файла (в плане области видимости). Это не как в обычном JS.
Если arrow function только возвращает что-либо, мы можем упростить синтаксис:
Оригинал:
const function1 = () => {
  return 5;
};
Упрощаем:
const function1 = () => 5;
Оригинал:
const addPostActionCreator = () => {
  return {
    type: ADD_POST
  };
};
Упрощаем:
const addPostActionCreator = () => ({ type: ADD_POST });

Вообще, словосочетание ActionCreator в названиях не используется.


